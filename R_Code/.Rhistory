#install.packages("corrplot")
#install.packages("Hmisc")
#install.packages("GGally")
library("corrplot")
library("Hmisc")
library("reshape2")
library("GGally")
mydata = read.csv("G:/My Drive/Machine Learning/Cholangiocarcinoma/from iMac/book1.csv" , header=TRUE)
#mydata = read.csv("C:/Users/Matt Reidy/Downloads/cbioportal_cc_only.csv" , header=TRUE)
mydata <- mydata[,colSums(is.na(mydata))<nrow(mydata)]
mydata[is.na(mydata)] <- 0
mydata.cor.pearson = cor(mydata, method = c("pearson"))
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
mydata.p = mydata.rcorr$P
#drop duplicates and correlations of 1
mydata.cor.pearson[lower.tri(mydata.cor.pearson,diag=TRUE)] <- NA
mydata.cor.pearson[mydata.cor.pearson == 1] <- NA
#turn into a 3-column table and remove the NA values
mydata.cor.pearson <- as.data.frame(as.table(mydata.cor.pearson))
mydata.cor.pearson <- na.omit(mydata.cor.pearson)
#select significant values and sort by highest correlation
mydata.cor.pearson <- subset(mydata.cor.pearson, abs(Freq) >= .5)
mydata.cor.pearson <- mydata.cor.pearson[order(-abs(mydata.cor.pearson$Freq)),]
#write data to file
write.csv(mydata.cor.pearson, "C:/Users/Matt Reidy/Downloads/mydata.cor.pearson.csv")
#turn corr back into matrix and plot
mtx_corr <- reshape2::acast(mydata.cor.pearson, Var1~Var2, value.var="Freq")
mtx_corr[is.na(mtx_corr)] <- 0
corrplot(mtx_corr, is.corr=FALSE, tl.col="black", na.label=" ")
ggcorr(mtx_corr, method = c("everything", "pearson"))
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = mydata.coeff, col = palette, symm = TRUE)
heatmap(x = mydata.coeff, col = palette)
heatmap(x = mydata.coeff)
install.packages("corrplot")
install.packages("Hmisc")
install.packages("GGally")
library("corrplot")
library("Hmisc")
library("reshape2")
library("GGally")
mydata = read.csv("G:/My Drive/Machine Learning/Cholangiocarcinoma/from iMac/book1.csv" , header=TRUE)
#mydata = read.csv("C:/Users/Matt Reidy/Downloads/cbioportal_cc_only.csv" , header=TRUE)
mydata <- mydata[,colSums(is.na(mydata))<nrow(mydata)]
mydata[is.na(mydata)] <- 0
mydata.cor.pearson = cor(mydata, method = c("pearson"))
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
mydata.p = mydata.rcorr$P
#drop duplicates and correlations of 1
mydata.cor.pearson[lower.tri(mydata.cor.pearson,diag=TRUE)] <- NA
mydata.cor.pearson[mydata.cor.pearson == 1] <- NA
#turn into a 3-column table and remove the NA values
mydata.cor.pearson <- as.data.frame(as.table(mydata.cor.pearson))
mydata.cor.pearson <- na.omit(mydata.cor.pearson)
#select significant values and sort by highest correlation
mydata.cor.pearson <- subset(mydata.cor.pearson, abs(Freq) >= .5)
mydata.cor.pearson <- mydata.cor.pearson[order(-abs(mydata.cor.pearson$Freq)),]
#write data to file
write.csv(mydata.cor.pearson, "G:/My Drive/Machine Learning/Cholangiocarcinoma/from iMac/mydata.cor.pearson.csv")
#turn corr back into matrix and plot
mtx_corr <- reshape2::acast(mydata.cor.pearson, Var1~Var2, value.var="Freq")
mtx_corr[is.na(mtx_corr)] <- 0
corrplot(mtx_corr, is.corr=FALSE, tl.col="black", na.label=" ")
ggcorr(mtx_corr, method = c("everything", "pearson"))
install.packages("corrplot")
install.packages("Hmisc")
install.packages("GGally")
library("corrplot")
library("Hmisc")
library("reshape2")
library("GGally")
mydata = read.csv("G:/My Drive/Machine Learning/Cholangiocarcinoma/from iMac/book1.csv" , header=TRUE)
#mydata = read.csv("C:/Users/Matt Reidy/Downloads/cbioportal_cc_only.csv" , header=TRUE)
mydata <- mydata[,colSums(is.na(mydata))<nrow(mydata)]
mydata[is.na(mydata)] <- 0
mydata.cor.pearson = cor(mydata, method = c("pearson"))
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
mydata.p = mydata.rcorr$P
#drop duplicates and correlations of 1
mydata.cor.pearson[lower.tri(mydata.cor.pearson,diag=TRUE)] <- NA
mydata.cor.pearson[mydata.cor.pearson == 1] <- NA
#turn into a 3-column table and remove the NA values
mydata.cor.pearson <- as.data.frame(as.table(mydata.cor.pearson))
mydata.cor.pearson <- na.omit(mydata.cor.pearson)
#select significant values and sort by highest correlation
mydata.cor.pearson <- subset(mydata.cor.pearson, abs(Freq) >= .5)
mydata.cor.pearson <- mydata.cor.pearson[order(-abs(mydata.cor.pearson$Freq)),]
#write data to file
write.csv(mydata.cor.pearson, "G:/My Drive/Machine Learning/Cholangiocarcinoma/from iMac/mydata.cor.pearson.csv")
#turn corr back into matrix and plot
mtx_corr <- reshape2::acast(mydata.cor.pearson, Var1~Var2, value.var="Freq")
mtx_corr[is.na(mtx_corr)] <- 0
corrplot(mtx_corr, is.corr=FALSE, tl.col="black", na.label=" ")
ggcorr(mtx_corr, method = c("everything", "pearson"))
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = mydata.coeff, col = palette, symm = TRUE)
heatmap(x = mydata.coeff, col = palette)
heatmap(x = mydata.coeff)
install.packages("corrplot")
install.packages("Hmisc")
install.packages("GGally")
library("corrplot")
library("Hmisc")
library("reshape2")
library("GGally")
mydata = read.csv("G:/My Drive/Machine Learning/Cholangiocarcinoma/from iMac/book1.csv" , header=TRUE)
#mydata = read.csv("C:/Users/Matt Reidy/Downloads/cbioportal_cc_only.csv" , header=TRUE)
mydata <- mydata[,colSums(is.na(mydata))<nrow(mydata)]
mydata[is.na(mydata)] <- 0
mydata.cor.pearson = cor(mydata, method = c("pearson"))
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
mydata.p = mydata.rcorr$P
#drop duplicates and correlations of 1
mydata.cor.pearson[lower.tri(mydata.cor.pearson,diag=TRUE)] <- NA
mydata.cor.pearson[mydata.cor.pearson == 1] <- NA
#turn into a 3-column table and remove the NA values
mydata.cor.pearson <- as.data.frame(as.table(mydata.cor.pearson))
mydata.cor.pearson <- na.omit(mydata.cor.pearson)
#select significant values and sort by highest correlation
mydata.cor.pearson <- subset(mydata.cor.pearson, abs(Freq) >= .5)
mydata.cor.pearson <- mydata.cor.pearson[order(-abs(mydata.cor.pearson$Freq)),]
#write data to file
write.csv(mydata.cor.pearson, "G:/My Drive/Machine Learning/Cholangiocarcinoma/from iMac/mydata.cor.pearson.csv")
#turn corr back into matrix and plot
mtx_corr <- reshape2::acast(mydata.cor.pearson, Var1~Var2, value.var="Freq")
mtx_corr[is.na(mtx_corr)] <- 0
corrplot(mtx_corr, is.corr=FALSE, tl.col="black", na.label=" ")
ggcorr(mtx_corr, method = c("everything", "pearson"))
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = mydata.coeff, col = palette, symm = TRUE)
heatmap(x = mydata.coeff, col = palette)
heatmap(x = mydata.coeff)
all_data_raw <- read.csv("G:/My Drive/Machine Learning/cBioPortal/all_data_raw.csv")
View(all_data_raw)
library(tidyverse)
library(tidyr)
install.packages("tidyr")
library(tidyr)
all_data_raw[!duplicated(all_data_raw$sample_id), ]
all_data_raw[!duplicated(all_data_raw$sample_id), ]
all_data_raw[!duplicated(all_data_raw$sample_id), ]
View(all_data_raw)
all_data_raw %>% distinct(sample_id, .keep_all = TRUE)
library(dplyr)
install.packages("dplyr")
all_data_raw %>% distinct(sample_id, .keep_all = TRUE)
all_data_raw %>% dplyr::distinct(sample_id, .keep_all = TRUE)
duplicated(all_data_raw)
all_data_raw %>% distiinct()
library(dplyr)
all_data_raw %>% distiinct()
all_data_raw %>% distinct()
all_data_raw %>% distinct()
view(all_data_raw)
view(all_data_raw)
View(all_data_raw)
mydata = read.csv("G:\My Drive\Machine Learning\cBioPortal\all_data_raw.csv" , header=TRUE)
mydata = read.csv("G:/My Drive/Machine Learning/cBioPortal/all_data_raw.csv" , header=TRUE)
my_data %>% distinct(sample_id, .keep_all = TRUE)
mydata %>% distinct(sample_id, .keep_all = TRUE)
View(mydata)
View(mydata)
mtx_corr[is.na(mtx_corr)] <- 0
install.packages("GGally")
install.packages("corrplot")
install.packages("Hmisholangc")
install.packages("GGally")
library("corrplot")
library("Hmisc")
library("reshape2")
library("GGally")
mydata = read.csv("G:/My Drive/Machine Learning/cBioPortal/all_data_mutations_only.csv" , header=TRUE)
mydata <- mydata[,colSums(is.na(mydata))<nrow(mydata)]
mydata[is.na(mydata)] <- 0
mydata.cor.pearson = cor(mydata, method = c("pearson"))
mydata.rcorr = rcorr(as.matrix(mydata))
mydata.coeff = mydata.rcorr$r
mydata.p = mydata.rcorr$P
#drop duplicates and correlations of 1
mydata.cor.pearson[lower.tri(mydata.cor.pearson,diag=TRUE)] <- NA
mydata.cor.pearson[mydata.cor.pearson == 1] <- NA
#turn into a 3-column table and remove the NA values
mydata.cor.pearson <- as.data.frame(as.table(mydata.cor.pearson))
mydata.cor.pearson <- na.omit(mydata.cor.pearson)
#select significant values and sort by highest correlation
mydata.cor.pearson <- subset(mydata.cor.pearson, abs(Freq) >= .5)
mydata.cor.pearson <- mydata.cor.pearson[order(-abs(mydata.cor.pearson$Freq)),]
#write data to file
write.csv(mydata.cor.pearson, "G:/My Drive/Machine Learning/cBioPortal/all_data_mutations_only.cor.pearson.csv")
#turn corr back into matrix and plot
mtx_corr <- reshape2::acast(mydata.cor.pearson, Var1~Var2, value.var="Freq")
mtx_corr[is.na(mtx_corr)] <- 0
corrplot(mtx_corr, is.corr=FALSE, tl.col="black", na.label=" ")
ggcorr(mtx_corr, method = c("everything", "pearson"))
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = mydata.coeff, col = palette, symm = TRUE)
heatmap(x = mydata.coeff, col = palette)
heatmap(x = mydata.coeff)
setwd("G:/My Drive/Machine Learning/Cholangiocarcinoma_ML/R_Code")
CoefData = CoefData[-1,]
Data <- read.csv("G:/my drive/machine learning/Cholangiocarcinoma_ML/Data_Files/cc_cancer_mutations.txt" , sep="\t", header=TRUE)
# Lasso
table(Data$cancer_type)
library(tidyverse)
library(caret)
library(glmnet)
x <- model.matrix(cancer_type~., Data)[,-1]
y <- Data[,which(names(Data) %in% c("cancer_type"))]
set.seed(123)
cv.lasso <- cv.glmnet(x, y, alpha = 1, family = "binomial") #binomial_multinomial
plot(cv.lasso)
cv.lasso$lambda.min
cv.lasso$lambda.1se
coef(cv.lasso, cv.lasso$lambda.min)
Coef <- coef(cv.lasso, cv.lasso$lambda.min)
write.csv(x = as.matrix(Coef), file = "G:/my drive/machine learning/Cholangiocarcinoma_ML/Data_Files/cc_LASSO_Coef.csv", row.names = TRUE)
Coef
CoefData <- read.csv("G:/my drive/machine learning/Cholangiocarcinoma_ML/Data_Files/cc_LASSO_Coef.csv", header=TRUE)
colnames(CoefData) <- c("Gene","Coef")
CoefData = CoefData[-1,]
